--
require('luke')

-- Set the leader key to ','
--vim.g.mapleader = ','
---- Define mappings using the leader key
--vim.api.nvim_set_keymap('n', '<Leader>w', ':w<CR>', { noremap = true, silent = true })
--vim.api.nvim_set_keymap('n', '<Leader>q', ':q<CR>', { noremap = true, silent = true })
--
---- Set the number of spaces for each indentation level
--vim.o.shiftwidth = 2
---- Use spaces instead of tabs for indentation
--vim.o.expandtab = true
---- Enable auto-indentation
--vim.o.smartindent = true
--vim.o.autoindent = true
---- Enable line wrapping
--vim.o.wrap = true
---- Enable line numbers
--vim.wo.number = true
---- Enable relative line numbers
----vim.wo.relativenumber = true
--
--
--local lazypath = vim.fn.stdpath('data') .. '/lazy/lazy.nvim'
--local uv = vim.uv or vim.loop
--
--if not uv.fs_stat(lazypath) then
--  print('Installing lazy.nvim...')
--  vim.fn.system({
--    'git',
--    'clone',
--    '--filter=blob:none',
--    'https://github.com/folke/lazy.nvim.git',
--    '--branch=stable',
--    lazypath,
--  })
--  print('Done.')
--end
--vim.opt.rtp:prepend(lazypath)
--
--require('lazy').setup({
--  -- theme
--  {'folke/tokyonight.nvim'},
--  -- lsp
----  {
----    'VonHeikemen/lsp-zero.nvim',
----    branch = 'v3.x',
----    lazy = true,
----    config = false
----  },
--  {
--    'neovim/nvim-lspconfig',
--    dependencies = {
--      {'hrsh7th/cmp-nvim-lsp'},
--    }
--  },
----  -- Autocompletion
----  {
----    'hrsh7th/nvim-cmp',
----    dependencies = {
----      {'L3MON4D3/LuaSnip'}
----    },
----  },
--  -- telescope
--  {
--    'nvim-telescope/telescope.nvim', tag = '0.1.5',
--    -- or                              , branch = '0.1.x',
--    dependencies = { 'nvim-lua/plenary.nvim' }
--  },
--  {
--      "nvim-telescope/telescope-file-browser.nvim",
--      dependencies = { "nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim" }
--  },
--  {
--    "nvim-treesitter/nvim-treesitter",
--    build = ":TSUpdate"
--  },
--  -- markdown preview
--  {
--    "iamcco/markdown-preview.nvim",
--    cmd = { "MarkdownPreviewToggle", "MarkdownPreview", "MarkdownPreviewStop" },
--    ft = { "markdown" },
--    build = function() vim.fn["mkdp#util#install"]() end,
--  },
--
--  -- show keybindings
--  {
--    "folke/which-key.nvim",
--    event = "VeryLazy",
--    init = function()
--      vim.o.timeout = true
--      vim.o.timeoutlen = 300
--    end,
--    opts = {
--      -- your configuration comes here
--      -- or leave it empty to use the default settings
--      -- refer to the configuration section below
--    }
--  },
--
--  -- compilter plugin, 12/29 installed
--  { -- This plugin
--    "Zeioth/compiler.nvim",
--    cmd = {"CompilerOpen", "CompilerToggleResults", "CompilerRedo"},
--    dependencies = { "stevearc/overseer.nvim" },
--    opts = {},
--  },
--  { -- The task runner we use
--    "stevearc/overseer.nvim",
--    commit = "400e762648b70397d0d315e5acaf0ff3597f2d8b",
--    cmd = { "CompilerOpen", "CompilerToggleResults", "CompilerRedo" },
--    opts = {
--      task_list = {
--        direction = "bottom",
--        min_height = 25,
--        max_height = 25,
--        default_detail = 1
--      },
--    },
--  },
--  {
--    "prettier/vim-prettier",
----    cmd = {'yarn install --frozen-lockfile --production'},
--  },
--  {
--    "folke/lazydev.nvim",
--    ft = "lua", -- only load on lua files
--    opts = {
--      library = {
--        -- See the configuration section for more details
--        -- Load luvit types when the `vim.uv` word is found
--        { path = "${3rd}/luv/library", words = { "vim%.uv" } },
--      },
--    },
--  },
--
----  { -- optional cmp completion source for require statements and module annotations
----    "hrsh7th/nvim-cmp",
----    opts = function(_, opts)
----      opts.sources = opts.sources or {}
----      table.insert(opts.sources, {
----        name = "lazydev",
----        group_index = 0, -- set group index to 0 to skip loading LuaLS completions
----      })
----    end,
----  },
--
--{
--  "folke/trouble.nvim",
--  opts = {}, -- for default options, refer to the configuration section for custom setup.
--  cmd = "Trouble",
--  keys = {
--    {
--      "<leader>xx",
--      "<cmd>Trouble diagnostics toggle<cr>",
--      desc = "Diagnostics (Trouble)",
--    },
--    {
--      "<leader>xX",
--      "<cmd>Trouble diagnostics toggle filter.buf=0<cr>",
--      desc = "Buffer Diagnostics (Trouble)",
--    },
--    {
--      "<leader>cs",
--      "<cmd>Trouble symbols toggle focus=false<cr>",
--      desc = "Symbols (Trouble)",
--    },
--    {
--      "<leader>cl",
--      "<cmd>Trouble lsp toggle focus=false win.position=right<cr>",
--      desc = "LSP Definitions / references / ... (Trouble)",
--    },
--    {
--      "<leader>xL",
--      "<cmd>Trouble loclist toggle<cr>",
--      desc = "Location List (Trouble)",
--    },
--    {
--      "<leader>xQ",
--      "<cmd>Trouble qflist toggle<cr>",
--      desc = "Quickfix List (Trouble)",
--    },
--  },
--}
--
--
--
----  { -- optional blink completion source for require statements and module annotations
----    "saghen/blink.cmp",
----    build = 'cargo bulid --release',
----    opts = {
----      sources = {
----        -- add lazydev to your completion providers
----        default = { "lazydev", "lsp", "path", "snippets", "buffer" },
----        providers = {
----          lazydev = {
----            name = "LazyDev",
----            module = "lazydev.integrations.blink",
----            -- make lazydev completions top priority (see `:h blink.cmp`)
----            score_offset = 100,
----          },
----        },
----      },
----    },
----  },
--})
--
--
---- Setting colorscheme
--vim.opt.termguicolors = true
--vim.cmd.colorscheme('tokyonight')
--
---- LSP stuff
----local lsp_zero = require('lsp-zero')
----lsp_zero.on_attach(function(client, bufnr)
----  lsp_zero.default_keymaps({buffer = bufnr})
----end)
--
--
---- configure lua language server
----local lua_opts = lsp_zero.nvim_lua_ls()
----require('lspconfig').lua_ls.setup(lua_opts)
--
----require('lspconfig').clangd.setup({
----  cmd = {'/usr/bin/clangd-16'}
----})
----
----require'lspconfig'.pylsp.setup{
----  settings = {
----    pylsp = {
----      plugins = {
----        pycodestyle = {
----          ignore = {'W391'},
----          maxLineLength = 100
----        }
----      }
----    }
----  }
----}
----
------ typescript
------require'lspconfig'.tsserver.setup{}
----require'lspconfig'.gopls.setup{}
----
----
------ terraform
----require'lspconfig'.terraformls.setup{}
----vim.api.nvim_create_autocmd({"BufWritePre"}, {
----  pattern = {"*.tf", "*.tfvars"},
----  callback = function()
----    vim.lsp.buf.format()
----  end,
----})
--
--
--
----lsp_zero.setup_servers({'lua_ls', 'clangd', 'pylsp', 'gopls', 'terraformls'})
--
--
----- CMP - autocomplete menu
----local cmp = require('cmp')
----local cmp_action = lsp_zero.cmp_action()
--
----cmp.setup({
----  mapping = cmp.mapping.preset.insert({
----    -- `Enter` key to confirm completion
----    ['<CR>'] = cmp.mapping.confirm({select = false}),
----
----    ['<Tab>'] = cmp_action.luasnip_supertab(),
----    ['<S-Tab>'] = cmp_action.luasnip_shift_supertab(),
----
----    -- Navigate between snippet placeholder
----    ['<C-f>'] = cmp_action.luasnip_jump_forward(),
----    ['<C-b>'] = cmp_action.luasnip_jump_backward(),
----
----  })
----})
--
--
---- telescope configuration
--local builtin = require('telescope.builtin')
--vim.keymap.set('n', '<leader>ff', builtin.find_files, {})
--vim.keymap.set('n', '<leader>fg', builtin.live_grep, {})
--vim.keymap.set('n', '<leader>fb', builtin.buffers, {})
--vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})
--vim.api.nvim_set_keymap('n', '<C-e>', '<C-w>', { noremap = true, silent = true})
--
--
---- telescope flie browser
--require("telescope").load_extension "file_browser"
--vim.api.nvim_set_keymap(
--  "n",
--  "<C-n>",
--  ":Telescope file_browser<CR>",
--  { noremap = true }
--)
---- open file_browser with the path of the current buffer
--vim.api.nvim_set_keymap(
--  "n",
--  "<leader>fb",
--  ":Telescope file_browser path=%:p:h select_buffer=true<CR>",
--  { noremap = true }
--)
--
--
--
--
---- javascript LSP
----local lspconfig = require('lspconfig')
----local servers = { 'tailwindcss', 'jsonls', 'eslint' }
----for _, lsp in pairs(servers) do
----  lspconfig[lsp].setup {
----    on_attach = on_attach,
----    capabilites = capabilities,
----  }
----end
----
------ This is an interesting one, for some reason these two LSPs (CSS/HTML) need to
------ be activated separately outside of the above loop. If someone can tell me why,
------ send me a note...
----lspconfig.cssls.setup {
----  on_attach = on_attach,
----  capabilities = capabilities
----}
----
----lspconfig.html.setup {
----  on_attach = on_attach,
----  capabilities = capabilities
----}
----lspconfig.ts_ls.setup({
----  init_options = {
----    plugins = {
----      {
----        name = "@vue/typescript-plugin",
----        location = "/usr/local/lib/node_modules/@vue/typescript-plugin",
----        languages = {"javascript", "typescript", "vue"},
----      },
----    },
----  },
----  filetypes = {
----    "javascript",
----    "typescript",
----    "vue",
----  },
----})
